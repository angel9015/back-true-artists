# frozen_string_literal: true

module Api
  module V1
    class BookingsController < ApplicationController
      skip_before_action :authenticate_request!, only: %i[create]
      before_action :find_booking, only: %i[show]
      before_action :find_booking_user, only: %i[create]

      def index
        @results = BookingSearch.new(
          query: params[:query],
          options: search_options
        ).filter

        render json: @results, status: :ok
      end

      def create
        result = BookingService.new(booking_params).call

        if result && result.success?
          render json: BookingSerializer.new(result.payload).to_json, status: :created
        else
          render_api_error(status: 422, errors: result.errors)
        end
      end

      def show
        authorize @booking

        render json: BookingSerializer.new(@booking).to_json, status: :ok
      end

      def find_booking_user
        return current_user if current_user
        result = UserService.new(user_params).call
        return result.payload if result && result.success?

        render_api_error(status: 422, errors: result.errors)
      end

      def find_booking
        @booking = Booking.find(params[:id])
      end

      def booking_params
        params.permit(
          :description,
          :tattoo_placement,
          :tattoo_color,
          :tattoo_size,
          :budget,
          :style_id,
          :phone_number,
          :availability,
          :city,
          :urgency,
          :bookable_type,
          :bookable_id,
          :first_tattoo
        ).tap do |booking|
          booking[:user_id] = find_booking_user.id
        end
      end

      def user_params
        params.permit(:full_name, :email).tap do |user|
          user[:autogenerated] = true
          user[:password] = user[:password_confirmation] = SecureRandom.hex(6)
        end
      end

      def search_options
        {
          page: params[:page] || 1,
          per_page: params[:per_page] || BaseSearch::PER_PAGE,
          status: params[:status],
          user_id: current_user.id,
          near: params[:city] || params[:near],
          within: params[:within]
        }.delete_if { |_k, v| v.nil? }
      end
    end
  end
end
